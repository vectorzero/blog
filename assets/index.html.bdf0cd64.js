import{_ as e,o as t,c as r,e as o}from"./app.6b320b72.js";var n="/web/img/in-post/data-structures/RangeMinimumQuery.png",a="/web/img/in-post/data-structures/segment-tree1.png";const i={},s=o('<p>In computer science, a <strong>segment tree</strong> also known as a statistic tree is a tree data structure used for storing information about intervals, or segments. It allows querying which of the stored segments contain a given point. It is, in principle, a static structure; that is, it&#39;s a structure that cannot be modified once it&#39;s built. A similar data structure is the interval tree.</p><p>A segment tree is a binary tree. The root of the tree represents the whole array. The two children of the root represent the first and second halves of the array. Similarly, the children of each node corresponds to the two halves of the array corresponding to the node.</p><p>We build the tree bottom up, with the value of each node being the &quot;minimum&quot; (or any other function) of its children&#39;s values. This will take <code>O(n log n)</code> time. The number of operations done is the height of the tree, which is <code>O(log n)</code>. To do range queries, each node splits the query into two parts, one sub-query for each child. If a query contains the whole subarray of a node, we can use the precomputed value at the node. Using this optimisation, we can prove that only <code>O(log n)</code> minimum operations are done.</p><p><img src="'+n+'" alt="Min Segment Tree"></p><p><img src="'+a+'" alt="Sum Segment Tree"></p><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application" aria-hidden="true">#</a> Application</h2><p>A segment tree is a data structure designed to perform certain array operations efficiently - especially those involving range queries.</p><p>Applications of the segment tree are in the areas of computational geometry, and geographic information systems.</p><p>Current implementation of Segment Tree implies that you may pass any binary (with two input params) function to it and thus you&#39;re able to do range query for variety of functions. In tests you may find examples of doing <code>min</code>, <code>max</code> and <code>sum</code> range queries on SegmentTree.</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Segment_tree" target="_blank" rel="noopener noreferrer">Wikipedia</a></li><li><a href="https://www.youtube.com/watch?v=ZBHKZF5w4YU&amp;index=65&amp;list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a href="https://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/" target="_blank" rel="noopener noreferrer">GeeksForGeeks</a></li></ul>',11),c=[s];function h(p,d){return t(),r("div",null,c)}var u=e(i,[["render",h],["__file","index.html.vue"]]);export{u as default};
